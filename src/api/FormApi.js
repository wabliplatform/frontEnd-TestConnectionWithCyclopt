/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Form from '../model/Form';

/**
* Form service.
* @module api/FormApi
* @version 1.0.0
*/
export default class FormApi {

    /**
    * Constructs a new FormApi. 
    * @alias module:api/FormApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createform operation.
     * @callback module:api/FormApi~createformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Form} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Form} form data to be created
     * @param {module:api/FormApi~createformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Form}
     */
    createform(form, callback) {
      let postBody = form;
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling createform");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Form;
      return this.apiClient.callApi(
        '/form', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteform operation.
     * @callback module:api/FormApi~deleteformCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} formId the Id parameter
     * @param {module:api/FormApi~deleteformCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteform(formId, callback) {
      let postBody = null;
      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling deleteform");
      }

      let pathParams = {
        'formId': formId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/form/{formId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllform operation.
     * @callback module:api/FormApi~getAllformCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Form>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/FormApi~getAllformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Form>}
     */
    getAllform(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Form];
      return this.apiClient.callApi(
        '/form/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getform operation.
     * @callback module:api/FormApi~getformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Form} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} formId the Id parameter
     * @param {module:api/FormApi~getformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Form}
     */
    getform(formId, callback) {
      let postBody = null;
      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling getform");
      }

      let pathParams = {
        'formId': formId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Form;
      return this.apiClient.callApi(
        '/form/{formId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateform operation.
     * @callback module:api/FormApi~updateformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Form} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} formId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Form} opts.form data to be updated
     * @param {module:api/FormApi~updateformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Form}
     */
    updateform(formId, opts, callback) {
      opts = opts || {};
      let postBody = opts['form'];
      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling updateform");
      }

      let pathParams = {
        'formId': formId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Form;
      return this.apiClient.callApi(
        '/form/{formId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
